# Generated by Django 5.1.1 on 2024-09-18 11:29

import pathlib

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import core.classes.storage
import core.models


class Migration(migrations.Migration):
	initial = True

	dependencies = [
		("auth", "0012_alter_user_first_name_max_length"),
	]

	operations = [
		migrations.CreateModel(
			name="Platform",
			fields=[
				("id", models.UUIDField(primary_key=True, serialize=False)),
				("name", models.CharField(max_length=400)),
				("abbrev", models.CharField(blank=True, max_length=50)),
				("content_provider_name", models.CharField(blank=True, max_length=400)),
				("website", models.URLField(blank=True)),
				("deprecated", models.BooleanField(default=False)),
			],
		),
		migrations.CreateModel(
			name="Report",
			fields=[
				("counter_release", models.CharField(max_length=20)),
				("report_id", models.CharField(max_length=20, primary_key=True, serialize=False)),
			],
		),
		migrations.CreateModel(
			name="User",
			fields=[
				(
					"id",
					models.BigAutoField(
						auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
					),
				),
				("password", models.CharField(max_length=128, verbose_name="password")),
				(
					"last_login",
					models.DateTimeField(blank=True, null=True, verbose_name="last login"),
				),
				(
					"is_superuser",
					models.BooleanField(
						default=False,
						help_text="Designates that this user has all permissions without explicitly assigning them.",
						verbose_name="superuser status",
					),
				),
				(
					"first_name",
					models.CharField(blank=True, max_length=150, verbose_name="first name"),
				),
				(
					"last_name",
					models.CharField(blank=True, max_length=150, verbose_name="last name"),
				),
				(
					"is_staff",
					models.BooleanField(
						default=False,
						help_text="Designates whether the user can log into this admin site.",
						verbose_name="staff status",
					),
				),
				(
					"is_active",
					models.BooleanField(
						default=True,
						help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
						verbose_name="active",
					),
				),
				(
					"date_joined",
					models.DateTimeField(
						default=django.utils.timezone.now, verbose_name="date joined"
					),
				),
				("email", models.EmailField(max_length=254, unique=True)),
				(
					"groups",
					models.ManyToManyField(
						blank=True,
						help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
						related_name="user_set",
						related_query_name="user",
						to="auth.group",
						verbose_name="groups",
					),
				),
				(
					"user_permissions",
					models.ManyToManyField(
						blank=True,
						help_text="Specific permissions for this user.",
						related_name="user_set",
						related_query_name="user",
						to="auth.permission",
						verbose_name="user permissions",
					),
				),
			],
			options={
				"verbose_name": "user",
				"verbose_name_plural": "users",
				"abstract": False,
			},
			managers=[
				("objects", core.models.UserManager()),
			],
		),
		migrations.CreateModel(
			name="ReportToPlatform",
			fields=[
				(
					"id",
					models.BigAutoField(
						auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
					),
				),
				(
					"platform",
					models.ForeignKey(
						on_delete=django.db.models.deletion.CASCADE, to="core.platform"
					),
				),
				(
					"report",
					models.ForeignKey(
						on_delete=django.db.models.deletion.CASCADE, to="core.report"
					),
				),
			],
		),
		migrations.AddField(
			model_name="platform",
			name="reports",
			field=models.ManyToManyField(
				related_name="platforms", through="core.ReportToPlatform", to="core.report"
			),
		),
		migrations.CreateModel(
			name="SushiService",
			fields=[
				("id", models.UUIDField(primary_key=True, serialize=False)),
				("counter_release", models.CharField(max_length=20)),
				("url", models.URLField(blank=True)),
				(
					"ip_address_authorization",
					models.BooleanField(
						blank=True, help_text="Access restricted based on IP address", null=True
					),
				),
				(
					"api_key_required",
					models.BooleanField(blank=True, help_text="Is api key required", null=True),
				),
				(
					"platform_attr_required",
					models.BooleanField(
						blank=True, help_text="Is platform attr required", null=True
					),
				),
				(
					"requestor_id_required",
					models.BooleanField(
						blank=True, help_text="Is requestor_id required", null=True
					),
				),
				("deprecated", models.BooleanField(default=False)),
				(
					"platform",
					models.ForeignKey(
						null=True,
						on_delete=django.db.models.deletion.SET_NULL,
						related_name="sushi_services",
						to="core.platform",
					),
				),
			],
		),
		migrations.CreateModel(
			name="UserApiKey",
			fields=[
				(
					"id",
					models.CharField(
						editable=False,
						max_length=150,
						primary_key=True,
						serialize=False,
						unique=True,
					),
				),
				("prefix", models.CharField(editable=False, max_length=8, unique=True)),
				("hashed_key", models.CharField(editable=False, max_length=150)),
				("created", models.DateTimeField(auto_now_add=True, db_index=True)),
				(
					"name",
					models.CharField(
						default=None,
						help_text="A free-form name for the API key. Need not be unique. 50 characters max.",
						max_length=50,
					),
				),
				(
					"revoked",
					models.BooleanField(
						blank=True,
						default=False,
						help_text="If the API key is revoked, clients cannot use it anymore. (This cannot be undone.)",
					),
				),
				(
					"expiry_date",
					models.DateTimeField(
						blank=True,
						help_text="Once API key expires, clients cannot use it anymore.",
						null=True,
						verbose_name="Expires",
					),
				),
				(
					"user",
					models.ForeignKey(
						on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
					),
				),
			],
			options={
				"verbose_name": "API key",
				"verbose_name_plural": "API keys",
				"ordering": ("-created",),
				"abstract": False,
			},
		),
		migrations.CreateModel(
			name="Validation",
			fields=[
				(
					"id",
					models.BigAutoField(
						auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
					),
				),
				("created", models.DateTimeField(auto_now_add=True)),
				(
					"status",
					models.SmallIntegerField(
						choices=[(0, "Waiting"), (1, "Running"), (2, "Success"), (3, "Failure")]
					),
				),
				("task_id", models.CharField(blank=True, max_length=255, null=True, unique=True)),
				("platform_name", models.CharField(blank=True, max_length=150)),
				("filename", models.CharField(blank=True, max_length=100)),
				(
					"file",
					models.FileField(
						null=True,
						storage=core.classes.storage.RandomFileSystemStorage(
							location=pathlib.PurePosixPath(
								"/home/jsmetana/PycharmProjects/counter-validation-tool/upload"
							)
						),
						upload_to="file_validations",
					),
				),
				("result", models.JSONField(null=True)),
				("memory", models.PositiveBigIntegerField(null=True)),
				("time", models.FloatField(null=True)),
				(
					"api_key",
					models.ForeignKey(
						null=True, on_delete=django.db.models.deletion.CASCADE, to="core.userapikey"
					),
				),
				(
					"platform",
					models.ForeignKey(
						null=True, on_delete=django.db.models.deletion.SET_NULL, to="core.platform"
					),
				),
				(
					"user",
					models.ForeignKey(
						on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
					),
				),
			],
			options={
				"ordering": ("-id",),
				"constraints": [
					models.CheckConstraint(
						condition=models.Q(
							("platform__isnull", True), ("platform_name", ""), _connector="OR"
						),
						name="core_validation_platform_union",
					)
				],
			},
		),
	]
